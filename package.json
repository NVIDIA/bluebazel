{
    "name": "bluebazel",
    "displayName": "Blue Bazel",
    "description": "Bazel vscode UI integration to build, debug, and test targets",
    "version": "0.0.6",
    "engines": {
        "vscode": "^1.92.0"
    },
    "categories": [
        "Debuggers",
        "Programming Languages",
        "Testing",
        "Other"
    ],
    "icon": "images/icon.png",
    "activationEvents": [
        "workspaceContains:WORKSPACE"
    ],
    "main": "./out/extension.js",
    "contributes": {
        "views": {
            "bluebazelContainer": [
                {
                    "id": "bluebazelView",
                    "name": "Blue Bazel",
                    "icon": "images/icon_black_empty.svg",
                    "when": "NVIDIA.bluebazel.active"
                }
            ]
        },
        "commands": [
            {
                "command": "bluebazel.addToMultiPropTreeItem",
                "title": "Add",
                "icon": "$(add)"
            },
            {
                "command": "bluebazel.editMultiPropTreeItem",
                "title": "Edit",
                "icon": "$(pencil)"
            },
            {
                "command": "bluebazel.removeMultiPropTreeItem",
                "title": "Remove",
                "icon": "$(close)"
            },
            {
                "command": "bluebazel.copyMultiPropTreeItem",
                "title": "Copy",
                "icon": "$(copy)"
            },
            {
                "command": "bluebazel.editSinglePropTreeItem",
                "title": "Edit",
                "icon": "$(pencil)"
            },
            {
                "command": "bluebazel.copySinglePropTreeItem",
                "title": "Copy",
                "icon": "$(copy)"
            },
            {
                "command": "bluebazel.format",
                "title": "Format",
                "icon": "$(run)"
            },
            {
                "command": "bluebazel.clean",
                "title": "Clean",
                "icon": "$(run)"
            },
            {
                "command": "bluebazel.copyBuildCommand",
                "title": "Copy Build Command",
                "icon": "$(copy)"
            },
            {
                "command": "bluebazel.pickBuildTarget",
                "title": "Edit Build Target",
                "icon": "$(pencil)"
            },
            {
                "command": "bluebazel.buildCurrentFile",
                "title": "Build Current File",
                "icon": "$(file-binary)"
            },
            {
                "command": "bluebazel.build",
                "title": "Build",
                "icon": "$(run)"
            },
            {
                "command": "bluebazel.copyRunCommand",
                "title": "Copy Run Command",
                "icon": "$(copy)"
            },
            {
                "command": "bluebazel.pickRunTarget",
                "title": "Edit Run Target",
                "icon": "$(pencil)"
            },
            {
                "command": "bluebazel.refreshRunTargets",
                "title": "Refresh Run Targets",
                "icon": "$(refresh)"
            },
            {
                "command": "bluebazel.run",
                "title": "Run",
                "icon": "$(run)"
            },
            {
                "command": "bluebazel.debug",
                "title": "Debug",
                "icon": "$(debug-alt)"
            },
            {
                "command": "bluebazel.copyTestCommand",
                "title": "Copy Test Command",
                "icon": "$(copy)"
            },
            {
                "command": "bluebazel.pickTestTarget",
                "title": "Edit Test Target",
                "icon": "$(pencil)"
            },
            {
                "command": "bluebazel.test",
                "title": "Test",
                "icon": "$(run)"
            },
            {
                "command": "bluebazel.collapseAll",
                "title": "Collapse All",
                "icon": "$(collapse-all)"
            },
            {
                "command": "bluebazel.customButton",
                "title": "Custom Button",
                "icon": "$(run)"
            }
        ],
        "menus": {
            "view/title": [
                {
                    "command": "bluebazel.collapseAll",
                    "group": "navigation",
                    "when": "view == bluebazelView"
                }
            ],
            "view/item/context": [
                {
                    "command": "bluebazel.addToMultiPropTreeItem",
                    "group": "inline@1",
                    "when": "viewItem =~ /MultiPropTreeItem$/ && view == bluebazelView"
                },
                {
                    "command": "bluebazel.editMultiPropTreeItem",
                    "group": "inline@1",
                    "when": "viewItem =~ /MultiPropTreeItemChild$/ && view == bluebazelView"
                },
                {
                    "command": "bluebazel.copyMultiPropTreeItem",
                    "group": "inline@2",
                    "when": "viewItem =~ /MultiPropTreeItemChild$/ && view == bluebazelView"
                },
                {
                    "command": "bluebazel.removeMultiPropTreeItem",
                    "group": "inline@3",
                    "when": "viewItem =~ /MultiPropTreeItemChild$/ && view == bluebazelView"
                },
                {
                    "command": "bluebazel.editSinglePropTreeItem",
                    "group": "inline@1",
                    "when": "viewItem =~ /SinglePropTreeItem/ && view == bluebazelView"
                },
                {
                    "command": "bluebazel.copySinglePropTreeItem",
                    "group": "inline@2",
                    "when": "viewItem =~ /SinglePropTreeItem/ && view == bluebazelView"
                },
                {
                    "command": "bluebazel.pickBuildTarget",
                    "group": "inline@3",
                    "when": "viewItem == build && view == bluebazelView"
                },
                {
                    "command": "bluebazel.format",
                    "group": "inline@1",
                    "when": "viewItem == buildFormat && view == bluebazelView"
                },
                {
                    "command": "bluebazel.clean",
                    "group": "inline@1",
                    "when": "viewItem == buildClean && view == bluebazelView"
                },
                {
                    "command": "bluebazel.buildCurrentFile",
                    "group": "inline@2",
                    "when": "viewItem == build && view == bluebazelView"
                },
                {
                    "command": "bluebazel.build",
                    "group": "inline@1",
                    "when": "viewItem == build && view == bluebazelView"
                },
                {
                    "command": "bluebazel.copyBuildCommand",
                    "group": "@4",
                    "when": "viewItem == build && view == bluebazelView"
                },
                {
                    "command": "bluebazel.pickBuildTarget",
                    "group": "@3",
                    "when": "viewItem == build && view == bluebazelView"
                },
                {
                    "command": "bluebazel.buildCurrentFile",
                    "group": "@2",
                    "when": "viewItem == build && view == bluebazelView"
                },
                {
                    "command": "bluebazel.build",
                    "group": "@1",
                    "when": "viewItem == build && view == bluebazelView"
                },
                {
                    "command": "bluebazel.pickRunTarget",
                    "group": "inline@3",
                    "when": "viewItem == run && view == bluebazelView"
                },
                {
                    "command": "bluebazel.debug",
                    "group": "inline@2",
                    "when": "viewItem == run && view == bluebazelView"
                },
                {
                    "command": "bluebazel.run",
                    "group": "inline@1",
                    "when": "viewItem == run && view == bluebazelView"
                },
                {
                    "command": "bluebazel.refreshRunTargets",
                    "group": "inline@1",
                    "when": "viewItem == refreshRunTargets && view == bluebazelView"
                },
                {
                    "command": "bluebazel.copyRunCommand",
                    "group": "@4",
                    "when": "viewItem == run && view == bluebazelView"
                },
                {
                    "command": "bluebazel.pickRunTarget",
                    "group": "@3",
                    "when": "viewItem == run && view == bluebazelView"
                },
                {
                    "command": "bluebazel.debug",
                    "group": "@2",
                    "when": "viewItem == run && view == bluebazelView"
                },
                {
                    "command": "bluebazel.run",
                    "group": "@1",
                    "when": "viewItem == run && view == bluebazelView"
                },
                {
                    "command": "bluebazel.pickTestTarget",
                    "group": "inline@2",
                    "when": "viewItem == test && view == bluebazelView"
                },
                {
                    "command": "bluebazel.test",
                    "group": "inline@1",
                    "when": "viewItem == test && view == bluebazelView"
                },
                {
                    "command": "bluebazel.copyTestCommand",
                    "group": "@3",
                    "when": "viewItem == test && view == bluebazelView"
                },
                {
                    "command": "bluebazel.pickTestTarget",
                    "group": "@2",
                    "when": "viewItem == test && view == bluebazelView"
                },
                {
                    "command": "bluebazel.test",
                    "group": "@1",
                    "when": "viewItem == test && view == bluebazelView"
                },
                {
                    "command": "bluebazel.customButton",
                    "group": "inline@1",
                    "when": "viewItem == customButton && view == bluebazelView"
                }
            ]
        },
        "configuration": {
            "title": "Blue Bazel",
            "type": "object",
            "properties": {
                "bluebazel.customButtons": {
                    "type": "array",
                    "default": [],
                    "description": "List of custom commands"
                },
                "bluebazel.buildAtRun": {
                    "type": "boolean",
                    "default": true,
                    "description": "Build run target before launch."
                },
                "bluebazel.showShellCommandOutput": {
                    "type": "boolean",
                    "default": false,
                    "description": "Show output of custom shell commands."
                },
                "bluebazel.clearTerminalBeforeAction": {
                    "type": "boolean",
                    "default": true,
                    "description": "Clear terminal prior to each build action."
                },
                "bluebazel.runBinariesDirect": {
                    "type": "boolean",
                    "default": true,
                    "description": "Run and debug run targets directly (not under bazel)."
                },
                "bluebazel.engineLogging": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable debug engine logging."
                },
                "bluebazel.generateRunTargets": {
                    "type": "string",
                    "default": "query 'kind(cc_binary, //src/...)'",
                    "description": "Command to generate run targets."
                },
                "bluebazel.setupEnvironmentCommand": {
                    "type": "string",
                    "default": "",
                    "description": "Environment setup command that will set up environment for every bazel command."
                },
                "bluebazel.executableCommand": {
                    "type": "string",
                    "default": "bazel",
                    "description": "Path to executable."
                },
                "bluebazel.formatCommand": {
                    "type": "string",
                    "default": "run //:format",
                    "description": "Command to format project."
                },
                "bluebazel.shellCommands": {
                    "type": "array",
                    "default": [
                        {
                            "name": "sampleRunHelper",
                            "command": "echo '${bluebazel.runTarget}'"
                        },
                        {
                            "name": "sampleRun",
                            "command": "${bluebazel.executable} run <sampleRunHelper>"
                        }
                    ]
                }
            }
        }
    },
    "scripts": {
        "vscode:prepublish": "npm run compile && npm run esbuild-base -- --minify",
        "compile": "tsc -p ./ && npm run copy:images",
        "lint": "eslint src --ext ts",
        "watch": "tsc -watch -p ./",
        "pretest": "npm run compile && npm run lint",
        "test": "node ./out/test/runTest.js",
        "copy:images": "rm -r -f out/images && cp -r images out",
        "esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=out/main.js --external:vscode --format=cjs --platform=node --sourcemap"
    },
    "devDependencies": {
        "@types/glob": "^7.1.3",
        "@types/mocha": "^8.0.0",
        "@types/mock-fs": "^4.13.1",
        "@types/node": "^14.0.27",
        "@types/uuid": "^10.0.0",
        "@types/vscode": "^1.92.0",
        "@typescript-eslint/eslint-plugin": "^5.59.7",
        "@typescript-eslint/parser": "^5.59.7",
        "esbuild": "^0.17.19",
        "eslint": "^7.32.0",
        "glob": "^7.1.6",
        "mocha": "^10.2.0",
        "mock-fs": "^5.2.0",
        "typescript": "^4.0.2",
        "vscode-test": "^1.4.0"
    },
    "dependencies": {
        "@types/tmp": "^0.2.0",
        "atob": "^2.1.2",
        "executable": "^4.1.1",
        "fast-glob": "^3.2.4",
        "glob-parent": "^6.0.2",
        "istextorbinary": "^5.10.0",
        "tmp": "^0.2.1",
        "uuid": "^10.0.0"
    },
    "publisher": "NVIDIA",
    "repository": {
        "url": "https://github.com/NVIDIA/bluebazel"
    }
}
